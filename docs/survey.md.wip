# Existing Shells Landscape

(excluding archaic shells):

 - bash :: Bourne Again Shell
        PRO:
             - ubiquitous (default on over 80% of all servers,
                           assummed available by many standard tools),
             - user-friendly for simple use,
             - high POSIX compliance,
             - stable adoption level (very slowly decreasing)
             - excellent for prod envs where perf is not #1 constraint
        CON:
             - not user-friendly for advanced use,
             - arcane invocations (consequence of POSIX compliance),
             - ton of gotcha corner-case foot-shooters,
             - text pipelines,
             - compatibility concern causes very slow development
             - performance is not the primary consideration
         PERF (slower than zsh or ksh, latest at time of writing):
             - 10x ksh,  ~   zsh in: command substitution
             -  4x ksh, 1.5x zsh in: builtin output
             -  4x ksh,  ~   zsh in: command evaluation
             -  3x zsh,  3x  ksh in: definition evaluation
             -  3x ksh,  ~   zsh in: positional args, str cmp
             -  3x zsh, 2.5x ksh in: assignments
             -  3x zsh,  2x  ksh in: increments
             -  1.5-3x zsh, 1.5-3x ksh in: str ops via expansion

 - zsh  :: [Zee-shell]
         PRO:
             - most user-friendly and most advanced *NIX shell,
             - increasing adoption,
             - under active development,
             - high POSIX compliance,
             - most advanced custom completion and interactive command line
                         editing and prompting functionality from any shell
             - excellent personal and production shell
             - many extension modules available
         CON:
             - text pipelines,
             - low (but increasing) adoption,
             - arcane invocations (consequence of POSIX compliance)

 - ksh93 :: Korn Shell
         PRO:
             - more advanced than even Zsh in many scripting aspects (static
               scope, true refs, multidim arrays, enums as types, type and
               function static vars, compound vars, binary data, and more)
             - required on few old enterprize UNIX systems
             - few die-hard advanced users,
             - very high POSIX compliance
             - well suited for high-perf production environments
             - outperforms dash
         CON:
             - very low and decreasing adoption,
             - default configuration is least user-friendly from major *NIX
               shells above for interactive use
             - text pipelines,
             - arcane invocations (consequence of POSIX compliance)
             - non-existent development (some bug-fixes in over 20 years)

 - pwsh  :: PowerShell (relatively new, from Windows)
         PRO:
             - the most powerful shell of all currently,
             - full .NET object pipelines, and integrated text pipelines,
             - seamless in-process interoperability with any .NET language
                                                           (C#, F#, etc...),
             - very user-friendly (both simple and advanced use),
             - discoverable functionality,
             - under active development,
             - available on MacOS and Linux
             - well suited as personal shell on any major platform,
             - extremely well suited as personal shell for .NET devs,
                                and as production shell in .NET environments
             - many extension modules available,
             - easy to create and publish extension modules
         CON:
             - adoption hurdles (Microsoft stigma, and works differently
                                                     from any *NIX shell)
             - no POSIX compliance,
             - some *NIX usecases are not optimal (integration of POSIX parallel
                                                   pipelines within object pipelines)
             - will never be deployed on many *NIX production environments
               (adds .NET runtime requirement, adding maintainability
                and attack surface concerns and costs, also in module providers)

 - fish  :: Friendly Interactive Shell (relatively new *NIX shell)
         PRO:
             - structured text pipelines (helps avoid quoting pitfalls),
             - very user-friendly for simple use,
             - discoverable functionality for simple use
         CON:
             - no POSIX compliance by design,
             - advanced abilities of other shells have no support in fish,
             - will never be adopted in most production environments,
             - suitable promarily as personal shell for its proponents,
                     or in small and highly custom production environments.

 - dash  :: Debian Almquist Shell
         PRO:
             - suitable for resource-starved production environments
             - very high POSIX compliance
         CONS:
             - not suitable as personal shell
             - no perf benefits compared to other major shells above
             - arcane invocations (consequence of POSIX compliance)

 - Oil   :: Oils for UNIX (OSH, YSH) (needs evaluation)

 Exotic Shells to be evaluated (not POSIX compliant):

    - xonsh   :: Python3.6-superset shell

    - nushell :: Nu (pwsh-inspired cross-platform functional structured pipelines in Rust)

    - elvish  :: (in Go)
